#!/usr/bin/python
# -*- coding:utf-8 -*-

from keras.layers import Dense, Dropout, Activation, Flatten, add, ZeroPadding2D, Input, GlobalAveragePooling2D
from keras.layers import Conv2D, MaxPooling2D, AveragePooling2D
from keras.layers.normalization import BatchNormalization
from keras.models import Model
from keras.optimizers import SGD
from keras.callbacks import EarlyStopping, ModelCheckpoint
from keras.preprocessing.image import ImageDataGenerator

import params

def conv_block(x, nb_filter, kernel_size=3):
	k = nb_filter

	out = ZeroPadding2D((1, 1))(x)
	out = Conv2D(k, (kernel_size, kernel_size), strides=(2, 2))(out)
	out = BatchNormalization(axis=1)(out)
	out = Activation('relu')(out)

	out = Conv2D(k, (kernel_size, kernel_size), padding='same')(out)
	out = BatchNormalization(axis=1)(out)
	# out = Activation('relu')(out)
	
	x = Conv2D(k, (1, 1), strides=(2, 2))(x)
	x = BatchNormalization(axis=1)(x)

	out = add([out, x])
	out = Activation('relu')(out)

	return out

def identity_block(x, nb_filter, kernel_size=3):
	k = nb_filter # 

	out = Conv2D(k, (kernel_size, kernel_size), padding='same')(x)
	out = BatchNormalization(axis=1)(out)
	out = Activation('relu')(out)

	out = Conv2D(k, (kernel_size, kernel_size), padding='same')(out)
	out = BatchNormalization(axis=1)(out)
	# out = Activation('relu')(out)

	out = add([out, x])
	out = Activation('relu')(out)
	return out


def ResNet(X_train, Y_train, X_val, Y_val, args):
	inp = Input(shape=(1, 48, 48))
	out = ZeroPadding2D((1, 1))(inp)
	out = Conv2D(16, (3, 3))(out)
	out = BatchNormalization(axis=1)(out)
	out = Activation('relu')(out)
	# out = MaxPooling2D(pool_size=(2, 2))(out)

	# out = inception(out, [16,32,64])
	# out = inception(out, [64,128,256])
	# out = inception(out, [256,512,1024])
	out = identity_block(out,16)
	out = identity_block(out,16)
	out = identity_block(out,16)
	# out = identity_block(out,16)
	

	out = conv_block(out,32)
	out = identity_block(out,32)
	out = identity_block(out,32)
	# out = identity_block(out,32)
	

	out = conv_block(out,64)
	out = identity_block(out,64)
	out = identity_block(out,64)
	

	avg = GlobalAveragePooling2D()(out)
	#
	out = Dense(params.nb_classes, activation='softmax')(avg)

	avg_layer = Model(inp, avg)
	model = Model(inp, out)
	
	best_weights_filepath = './data/ferplus_weights.hdf5'
	saveBestModel = ModelCheckpoint(best_weights_filepath, monitor='val_acc', verbose=1, save_best_only=True, mode='auto')
	sgd = SGD(lr=0.1, decay=1e-4, momentum=0.9, nesterov=True)
	model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])

	# model.load_weights('../ferplus_best_weights7.hdf5')

	# no data augmentation
	if not args.aug:
		model.fit(X_train, Y_train, batch_size=params.batch_size, epochs=params.epochs, verbose=1, shuffle=True, validation_data=(X_val, Y_val), callbacks=[saveBestModel])
	else:

		datagen = ImageDataGenerator(horizontal_flip=True)
		# featurewise_center=False,  # set input mean to 0 over the dataset
		# samplewise_center=False,  # set each sample mean to 0
		# featurewise_std_normalization=False,  # divide inputs by std of the dataset
		# samplewise_std_normalization=False,  # divide each input by its std
		# zca_whitening=False,  # apply ZCA whitening
		# rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
		# width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
		# height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
		# horizontal_flip=True)  # randomly flip images
		# vertical_flip=False)  # randomly flip images

		# # # # compute quantities required for featurewise normalization
		# # # # (std, mean, and principal components if ZCA whitening is applied)
		datagen.fit(X_train)
		# X_batch, y_batch = datagen.flow(X_train, Y_train, batch_size=32)
		# # # # fit the model on the batches generated by datagen.flow()
		model.fit_generator(datagen.flow(X_train, Y_train, batch_size=params.batch_size),
			steps_per_epoch=X_train.shape[0],
			epochs=params.epochs,
			validation_data=(X_val, Y_val),
			callbacks=[saveBestModel])

	return model, avg_layer

